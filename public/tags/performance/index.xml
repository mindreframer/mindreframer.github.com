<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on Bits and pieces to remember</title>
    <link>http://devopsbox.es/tags/performance.html</link>
    <description>Recent content in Performance on Bits and pieces to remember</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>roman.heinrich@gmail.com</managingEditor>
    <webMaster>roman.heinrich@gmail.com</webMaster>
    <lastBuildDate>Tue, 08 Oct 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://devopsbox.es/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adaptive Replacement Cache - Alternative to LRU</title>
      <link>http://devopsbox.es/posts/2013/10-08-adaptive-replacement-cache-alternative-to-lru.html.html</link>
      <pubDate>Tue, 08 Oct 2013 00:00:00 +0000</pubDate>
      <author>roman.heinrich@gmail.com</author>
      <guid>http://devopsbox.es/posts/2013/10-08-adaptive-replacement-cache-alternative-to-lru.html.html</guid>
      <description> In performance, ARC is at least as good as LRU, and better in most real-world workloads.  Outperforming LRU with an Adaptive Replacement Cache Algorithm Golang Impementation  </description>
    </item>
    
    <item>
      <title>Measuring Ruby</title>
      <link>http://devopsbox.es/posts/2013/09-28-measuring-ruby.html.html</link>
      <pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate>
      <author>roman.heinrich@gmail.com</author>
      <guid>http://devopsbox.es/posts/2013/09-28-measuring-ruby.html.html</guid>
      <description>  http://confreaks.com/videos/2668-gogaruco%25202013-measuring-ruby
Profiling Ruby App:  Use latest Ruby :) Audit memory usage with memory_profiler run rack_mini_profiler in dev and production use flamegraphs to find slowest code use rbtrace to understand, what your code is doing  Links:  https://github.com/SamSaffron/memory_profiler https://github.com/MiniProfiler/rack-mini-profiler https://github.com/SamSaffron/flamegraph https://github.com/tmm1/rbtrace http://samsaffron.com/archive/2013/03/19/flame-graphs-in-ruby-miniprofiler  </description>
    </item>
    
    <item>
      <title>Testing perftoos.rb</title>
      <link>http://devopsbox.es/posts/2013/01-16-testing-perftoos.rb.html.html</link>
      <pubDate>Wed, 16 Jan 2013 00:00:00 +0000</pubDate>
      <author>roman.heinrich@gmail.com</author>
      <guid>http://devopsbox.es/posts/2013/01-16-testing-perftoos.rb.html.html</guid>
      <description> $ gem install perftools.rb # now run the tests $ CPUPROFILE=profiled RUBYOPT=&#34;-r`gem which perftools | tail -1`&#34; the_command_to_run_tests # now create the pdf with results $ pprof.rb --pdf profiled  profiled.pdf  Possible errors sh: dot: command not found sh: ps2pdf: command not found  Fix on OSX by installing graphviz and ghostscript:
brew install graphviz brew install ghostscript  </description>
    </item>
    
  </channel>
</rss>